import React, { useState, useEffect } from "react";

const HomePage = () => {
  // Giữ nguyên logic API cũ
  const handleGetStarted = () => {
    console.log("Navigating to login page");
  };
  
  const handleExplore = () => {
    console.log("Navigating to explore page");
  };
  
  // State cho animations
  const [isVisible, setIsVisible] = useState(false);
  const [featureIndex, setFeatureIndex] = useState(0);
  const [typedText, setTypedText] = useState("");
  const [isTyping, setIsTyping] = useState(true);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [scrollY, setScrollY] = useState(0);
  
  const features = [
    "Solve algorithmic challenges",
    "Compete in real-time contests",
    "Track your progress with analytics",
    "Learn from expert tutorials"
  ];
  
  const targetText = features[featureIndex];
  
  // Mouse tracking for interactive effects
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    
    const handleScroll = () => {
      setScrollY(window.scrollY);
    };
    
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('scroll', handleScroll);
    
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);
  
  // Text typing animation (giữ nguyên logic cũ)
  useEffect(() => {
    setIsVisible(true);
    
    let timeout;
    if (isTyping) {
      if (typedText.length < targetText.length) {
        timeout = setTimeout(() => {
          setTypedText(targetText.slice(0, typedText.length + 1));
        }, 100);
      } else {
        timeout = setTimeout(() => {
          setIsTyping(false);
        }, 1500);
      }
    } else {
      if (typedText.length > 0) {
        timeout = setTimeout(() => {
          setTypedText(typedText.slice(0, typedText.length - 1));
        }, 50);
      } else {
        setFeatureIndex((featureIndex + 1) % features.length);
        setIsTyping(true);
      }
    }
    
    return () => clearTimeout(timeout);
  }, [typedText, isTyping, featureIndex, targetText]);
  
  // Stats (giữ nguyên)
  const [stats] = useState({
    problems: 1200,
    users: 50000,
    contests: 120,
    countries: 75
  });
  
  // Testimonials (giữ nguyên)
  const testimonials = [
    {
      text: "HKTOJ transformed how I approach algorithmic problems. I went from barely solving easy problems to acing competitive coding interviews.",
      author: "Alex Chen, Software Engineer"
    },
    {
      text: "The structured learning path and real-time contests prepared me perfectly for coding competitions. HKTOJ is simply the best platform out there.",
      author: "Maria Rodriguez, CS Student"
    },
    {
      text: "As an educator, I've found HKTOJ to be invaluable for my students. The analytics help me understand where they need guidance.",
      author: "Dr. James Wilson, University Professor"
    }
  ];
  
  // Algorithm visualization patterns
  const AlgorithmPattern = () => (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {/* Binary tree visualization */}
      <div className="absolute top-20 left-10 opacity-10 animate-pulse">
        <svg width="200" height="150" viewBox="0 0 200 150">
          <circle cx="100" cy="30" r="15" fill="currentColor" className="animate-bounce" style={{animationDelay: '0s'}} />
          <circle cx="60" cy="80" r="12" fill="currentColor" className="animate-bounce" style={{animationDelay: '0.5s'}} />
          <circle cx="140" cy="80" r="12" fill="currentColor" className="animate-bounce" style={{animationDelay: '1s'}} />
          <circle cx="40" cy="120" r="10" fill="currentColor" className="animate-bounce" style={{animationDelay: '1.5s'}} />
          <circle cx="80" cy="120" r="10" fill="currentColor" className="animate-bounce" style={{animationDelay: '2s'}} />
          <line x1="100" y1="45" x2="60" y2="65" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="100" y1="45" x2="140" y2="65" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="60" y1="92" x2="40" y2="108" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="60" y1="92" x2="80" y2="108" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
        </svg>
      </div>
      
      {/* Graph visualization */}
      <div className="absolute top-40 right-10 opacity-10 animate-pulse">
        <svg width="180" height="120" viewBox="0 0 180 120">
          <circle cx="30" cy="30" r="12" fill="currentColor" className="animate-ping" style={{animationDelay: '0s'}} />
          <circle cx="150" cy="30" r="12" fill="currentColor" className="animate-ping" style={{animationDelay: '0.3s'}} />
          <circle cx="30" cy="90" r="12" fill="currentColor" className="animate-ping" style={{animationDelay: '0.6s'}} />
          <circle cx="150" cy="90" r="12" fill="currentColor" className="animate-ping" style={{animationDelay: '0.9s'}} />
          <circle cx="90" cy="60" r="12" fill="currentColor" className="animate-ping" style={{animationDelay: '1.2s'}} />
          <line x1="30" y1="30" x2="150" y2="30" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="30" y1="30" x2="30" y2="90" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="30" y1="90" x2="150" y2="90" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="150" y1="30" x2="150" y2="90" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="30" y1="30" x2="90" y2="60" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
          <line x1="90" y1="60" x2="150" y2="90" stroke="currentColor" strokeWidth="2" className="animate-pulse" />
        </svg>
      </div>
      
      {/* Sorting array visualization */}
      <div className="absolute bottom-20 left-20 opacity-10">
        {[20, 35, 15, 40, 25, 30].map((height, i) => (
          <div
            key={i}
            className="inline-block w-6 bg-current mx-1 animate-pulse"
            style={{
              height: `${height}px`,
              animationDelay: `${i * 0.2}s`,
              transform: `translateY(${Math.sin((Date.now() / 1000 + i) * 2) * 5}px)`
            }}
          />
        ))}
      </div>
    </div>
  );
  
  // Floating code particles
  const CodeParticles = () => (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      {['{}', '()', '[]', '++', '--', '==', '!=', '&&', '||'].map((symbol, i) => (
        <div
          key={i}
          className="absolute text-purple-300 opacity-20 animate-bounce text-2xl font-mono"
          style={{
            left: `${10 + (i * 10)}%`,
            top: `${20 + (i * 8)}%`,
            animationDelay: `${i * 0.5}s`,
            animationDuration: `${2 + i * 0.3}s`
          }}
        >
          {symbol}
        </div>
      ))}
      
      {/* Animated data structures */}
      {['Stack', 'Queue', 'Tree', 'Graph', 'Array', 'Hash'].map((ds, i) => (
        <div
          key={ds}
          className="absolute text-blue-300 opacity-15 animate-pulse text-sm font-mono"
          style={{
            right: `${5 + (i * 12)}%`,
            bottom: `${15 + (i * 6)}%`,
            animationDelay: `${i * 0.7}s`,
            transform: `rotate(${Math.sin((Date.now() / 2000 + i)) * 10}deg)`
          }}
        >
          {ds}
        </div>
      ))}
    </div>
  );
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-purple-900 text-white overflow-hidden">
      {/* Interactive cursor glow */}
      <div
        className="fixed w-96 h-96 rounded-full pointer-events-none z-50 mix-blend-screen"
        style={{
          background: `radial-gradient(circle, rgba(147, 51, 234, 0.1) 0%, transparent 70%)`,
          left: mousePosition.x - 192,
          top: mousePosition.y - 192,
          transform: `translate3d(0, 0, 0)`,
          transition: 'all 0.1s ease-out'
        }}
      />
      
      {/* Hero Section with enhanced animations */}
      <div className="relative overflow-hidden min-h-screen flex items-center">
        {/* Animated background patterns */}
        <AlgorithmPattern />
        <CodeParticles />
        
        {/* Matrix rain effect */}
        <div className="absolute inset-0 opacity-5">
          {Array.from({length: 20}).map((_, i) => (
            <div
              key={i}
              className="absolute top-0 text-green-400 text-xs font-mono animate-pulse"
              style={{
                left: `${i * 5}%`,
                animationDelay: `${i * 0.2}s`,
                animationDuration: `${3 + Math.random() * 2}s`
              }}
            >
              {'10110100'.repeat(20)}
            </div>
          ))}
        </div>
        
        {/* Gradient overlays with parallax */}
        <div 
          className="absolute inset-0 bg-gradient-to-r from-purple-600/30 to-blue-600/30 animate-pulse"
          style={{
            transform: `translateY(${scrollY * 0.5}px)`
          }}
        />
        
        <div className="container mx-auto px-4 py-24 md:py-32 relative z-20">
          <div className={`transition-all duration-2000 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'} flex flex-col items-center text-center space-y-12`}>
            
            {/* Enhanced logo with complex animations */}
            <div className="relative inline-block group">
              <h1 className="text-6xl md:text-8xl font-extrabold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-white via-purple-300 to-blue-300 animate-pulse">
                HKT ONLINE JUDGE
              </h1>
              
              {/* Multiple glow layers */}
              <div className="absolute -inset-2 -z-10 rounded-2xl blur-2xl bg-gradient-to-r from-purple-600 to-blue-600 opacity-50 animate-pulse group-hover:opacity-80 transition-opacity duration-500"></div>
              <div className="absolute -inset-1 -z-10 rounded-xl blur-xl bg-gradient-to-r from-cyan-400 to-purple-400 opacity-30 animate-ping"></div>
              
              {/* Floating elements around the title */}
              <div className="absolute -top-4 -left-4 w-4 h-4 bg-purple-400 rounded-full animate-bounce opacity-60" style={{animationDelay: '0s'}}></div>
              <div className="absolute -top-6 right-10 w-3 h-3 bg-blue-400 rounded-full animate-bounce opacity-60" style={{animationDelay: '0.5s'}}></div>
              <div className="absolute -bottom-4 -right-4 w-5 h-5 bg-cyan-400 rounded-full animate-bounce opacity-60" style={{animationDelay: '1s'}}></div>
              <div className="absolute -bottom-6 left-8 w-2 h-2 bg-purple-300 rounded-full animate-bounce opacity-60" style={{animationDelay: '1.5s'}}></div>
            </div>
            
            {/* Enhanced description with wave animation */}
            <div className="relative">
              <p className="text-2xl md:text-3xl text-gray-300 max-w-3xl leading-relaxed">
                <span className="font-bold text-purple-300 animate-pulse">Master algorithms.</span> 
                <span className="font-bold text-blue-300 animate-pulse" style={{animationDelay: '0.5s'}}>Elevate your code.</span>
                <br />
                <span className="typing-text h-12 inline-block text-gradient bg-gradient-to-r from-cyan-300 to-purple-300 bg-clip-text text-transparent">
                  {typedText}<span className="animate-ping text-white">|</span>
                </span>
              </p>
              
              {/* Animated underline */}
              <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-24 h-1 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full animate-pulse"></div>
            </div>
            
            {/* Enhanced buttons with advanced animations */}
            <div className="flex flex-wrap gap-6 justify-center mt-12">
              <button
                onClick={handleGetStarted}
                className="group relative px-10 py-5 bg-gradient-to-r from-purple-600 via-purple-700 to-blue-600 text-xl font-bold rounded-2xl transform transition-all duration-500 ease-in-out hover:-translate-y-2 hover:scale-105 focus:ring-4 focus:ring-purple-400 focus:outline-none overflow-hidden"
              >
                <span className="relative z-10 flex items-center space-x-2">
                  <span>Get Started Now</span>
                  <span className="transform group-hover:translate-x-2 transition-transform duration-300">→</span>
                </span>
                
                {/* Button glow effects */}
                <div className="absolute inset-0 bg-gradient-to-r from-purple-400 to-blue-400 rounded-2xl blur-xl opacity-50 group-hover:opacity-80 transition-opacity duration-300 -z-10"></div>
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-2xl animate-pulse opacity-20 -z-10"></div>
                
                {/* Particle effect on hover */}
                <div className="absolute inset-0 overflow-hidden rounded-2xl">
                  {Array.from({length: 6}).map((_, i) => (
                    <div
                      key={i}
                      className="absolute w-1 h-1 bg-white rounded-full opacity-0 group-hover:opacity-100 animate-ping"
                      style={{
                        left: `${20 + i * 10}%`,
                        top: `${30 + (i % 2) * 40}%`,
                        animationDelay: `${i * 0.1}s`
                      }}
                    />
                  ))}
                </div>
              </button>
              
              <button
                onClick={handleExplore}
                className="group relative px-10 py-5 bg-transparent border-2 border-purple-400 text-xl font-bold rounded-2xl transform transition-all duration-500 ease-in-out hover:-translate-y-2 hover:scale-105 hover:bg-purple-900/30 focus:ring-4 focus:ring-purple-400 focus:outline-none overflow-hidden"
              >
                <span className="relative z-10 flex items-center space-x-2">
                  <span>Explore Problems</span>
                  <span className="transform group-hover:rotate-45 transition-transform duration-300">⚡</span>
                </span>
                
                {/* Animated border */}
                <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-purple-400 to-blue-400 opacity-20 animate-pulse"></div>
              </button>
            </div>
          </div>
        </div>
        
        {/* Scroll indicator */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
          <div className="w-6 h-10 border-2 border-purple-400 rounded-full flex justify-center">
            <div className="w-1 h-3 bg-purple-400 rounded-full mt-2 animate-pulse"></div>
          </div>
        </div>
      </div>
      
      {/* Enhanced Stats Section */}
      <div className="py-20 bg-gradient-to-r from-black/50 to-purple-900/30 backdrop-blur-lg relative">
        {/* Animated background grid */}
        <div className="absolute inset-0 opacity-10">
          <div className="grid grid-cols-8 h-full">
            {Array.from({length: 32}).map((_, i) => (
              <div
                key={i}
                className="border-r border-purple-400 animate-pulse"
                style={{animationDelay: `${i * 0.1}s`}}
              />
            ))}
          </div>
        </div>
        
        <div className="container mx-auto px-4 relative z-10">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {Object.entries(stats).map(([key, value], index) => (
              <div 
                key={key}
                className="group relative text-center transform transition-all duration-1000 hover:scale-110"
                style={{
                  opacity: isVisible ? 1 : 0,
                  transform: isVisible ? 'translateY(0) scale(1)' : 'translateY(20px) scale(0.9)',
                  transitionDelay: `${index * 300}ms`
                }}
              >
                {/* Stat card with glow */}
                <div className="relative p-6 rounded-2xl bg-gradient-to-br from-gray-800/50 to-purple-900/30 backdrop-blur-sm border border-purple-500/30 group-hover:border-purple-400/60 transition-all duration-300">
                  <div className="text-5xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400 animate-pulse">
                    {value.toLocaleString()}+
                  </div>
                  <div className="text-gray-300 mt-3 capitalize font-semibold tracking-wide">
                    {key.replace(/([A-Z])/g, ' $1').trim()}
                  </div>
                  
                  {/* Hover glow effect */}
                  <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-purple-600/20 to-blue-600/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10 blur-xl"></div>
                  
                  {/* Floating particles */}
                  <div className="absolute -top-2 -right-2 w-4 h-4 bg-purple-400 rounded-full animate-ping opacity-60 group-hover:opacity-100"></div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Enhanced Features Section */}
      <div className="py-24 md:py-32 bg-gradient-to-br from-gray-900 to-black relative">
        {/* Animated circuit pattern */}
        <div className="absolute inset-0 opacity-5">
          <svg className="w-full h-full" viewBox="0 0 1000 1000">
            <defs>
              <pattern id="circuit" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">
                <circle cx="50" cy="50" r="2" fill="currentColor" className="animate-pulse" />
                <line x1="0" y1="50" x2="100" y2="50" stroke="currentColor" strokeWidth="0.5" className="animate-pulse" />
                <line x1="50" y1="0" x2="50" y2="100" stroke="currentColor" strokeWidth="0.5" className="animate-pulse" />
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#circuit)" />
          </svg>
        </div>
        
        <div className="container mx-auto px-4 relative z-10">
          <h2 className="text-4xl md:text-6xl font-bold text-center mb-20 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 animate-pulse">
            Why Choose HKTOJ?
          </h2>
          
          <div className="grid md:grid-cols-3 gap-12">
            {[
              {
                icon: "01",
                title: "Curated Problem Set",
                description: "Over 1,200 carefully selected algorithmic challenges across all difficulty levels, from basic to IOI/ICPC competition standard.",
                color: "from-purple-600 to-pink-600"
              },
              {
                icon: "02", 
                title: "Real-time Contests",
                description: "Participate in weekly competitions with live leaderboards. Test your skills against coders from around the world.",
                color: "from-blue-600 to-cyan-600"
              },
              {
                icon: "03",
                title: "Advanced Analytics", 
                description: "Track your progress with detailed performance metrics. Identify your strengths and areas for improvement.",
                color: "from-purple-600 to-blue-600"
              }
            ].map((feature, index) => (
              <div 
                key={index}
                className="group relative bg-gradient-to-br from-gray-800/50 to-gray-900/50 p-8 rounded-3xl border border-purple-500/30 hover:border-purple-400/60 transition-all duration-500 transform hover:-translate-y-4 hover:scale-105 backdrop-blur-sm"
              >
                {/* Icon with complex animation */}
                <div className={`relative w-20 h-20 mb-6 bg-gradient-to-r ${feature.color} rounded-2xl flex items-center justify-center text-2xl font-bold transform group-hover:rotate-12 transition-transform duration-300`}>
                  {feature.icon}
                  
                  {/* Icon glow */}
                  <div className={`absolute inset-0 bg-gradient-to-r ${feature.color} rounded-2xl blur-xl opacity-50 group-hover:opacity-80 transition-opacity duration-300 -z-10`}></div>
                  
                  {/* Orbiting particles */}
                  <div className="absolute -inset-4">
                    <div className="absolute w-2 h-2 bg-white rounded-full animate-spin opacity-60" style={{
                      animation: `spin 3s linear infinite`,
                      transformOrigin: '50px 50px'
                    }}></div>
                    <div className="absolute w-1 h-1 bg-purple-300 rounded-full animate-spin opacity-40" style={{
                      animation: `spin 4s linear infinite reverse`,
                      transformOrigin: '60px 60px',
                      top: '10px',
                      left: '10px'
                    }}></div>
                  </div>
                </div>
                
                <h3 className="text-2xl font-bold mb-4 text-purple-300 group-hover:text-purple-200 transition-colors duration-300">
                  {feature.title}
                </h3>
                <p className="text-gray-400 group-hover:text-gray-300 transition-colors duration-300 leading-relaxed">
                  {feature.description}
                </p>
                
                {/* Card glow effect */}
                <div className="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-600/10 to-blue-600/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500 -z-10 blur-2xl"></div>
                
                {/* Animated corner accents */}
                <div className="absolute top-4 right-4 w-12 h-12 border-t-2 border-r-2 border-purple-400/30 group-hover:border-purple-400/60 transition-colors duration-300"></div>
                <div className="absolute bottom-4 left-4 w-12 h-12 border-b-2 border-l-2 border-purple-400/30 group-hover:border-purple-400/60 transition-colors duration-300"></div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Enhanced Testimonials */}
      <div className="py-24 bg-gradient-to-r from-purple-900/20 to-blue-900/20 relative">
        {/* Testimonial background pattern */}
        <div className="absolute inset-0 opacity-10">
          {Array.from({length: 12}).map((_, i) => (
            <div
              key={i}
              className="absolute w-32 h-32 border border-purple-400/20 rounded-full animate-ping"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${i * 0.5}s`,
                animationDuration: `${3 + Math.random() * 2}s`
              }}
            />
          ))}
        </div>
        
        <div className="container mx-auto px-4 relative z-10">
          <h2 className="text-4xl md:text-6xl font-bold text-center mb-20 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400 animate-pulse">
            Success Stories
          </h2>
          
          <div className="grid md:grid-cols-3 gap-10">
            {testimonials.map((testimonial, index) => (
              <div 
                key={index}
                className="group relative bg-gradient-to-br from-gray-800/60 to-gray-900/60 p-8 rounded-3xl border border-purple-500/30 hover:border-purple-400/60 transition-all duration-500 transform hover:-translate-y-2 backdrop-blur-sm"
              >
                {/* Quote mark with animation */}
                <div className="text-purple-400 text-6xl font-serif mb-6 animate-pulse group-hover:scale-110 transition-transform duration-300">"</div>
                
                <p className="text-gray-300 mb-8 italic leading-relaxed text-lg group-hover:text-white transition-colors duration-300">
                  {testimonial.text}
                </p>
                
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold animate-pulse">
                    {testimonial.author.split(' ').map(n => n[0]).join('')}
                  </div>
                  <div className="text-purple-300 font-semibold group-hover:text-purple-200 transition-colors duration-300">
                    {testimonial.author}
                  </div>
                </div>
                
                {/* Testimonial glow */}
                <div className="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-600/5 to-blue-600/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 -z-10 blur-2xl"></div>
                
                {/* Star rating animation */}
                <div className="absolute top-4 right-4 flex space-x-1">
                  {Array.from({length: 5}).map((_, i) => (
                    <div
                      key={i}
                      className="w-3 h-3 bg-yellow-400 rounded-full animate-pulse opacity-80"
                      style={{animationDelay: `${i * 0.2}s`}}
                    />
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Enhanced CTA Section */}
      <div className="py-24 md:py-32 relative overflow-hidden">
        {/* Complex animated background */}
        <div className="absolute inset-0">
          <div className="absolute inset-0 bg-gradient-to-r from-purple-600/30 to-blue-600/30 animate-pulse"></div>
          <div className="absolute inset-0 bg-gradient-to-b from-transparent via-purple-900/20 to-transparent animate-pulse" style={{animationDelay: '1s'}}></div>
          
          {/* Floating geometric shapes */}
          <div className="absolute inset-0">
            {Array.from({length: 8}).map((_, i) => (
              <div
                key={i}
                className="absolute w-20 h-20 border-2 border-purple-400/20 rounded-full animate-spin opacity-30"
                style={{
                  left: `${10 + i * 12}%`,
                  top: `${20 + (i % 3) * 30}%`,
                  animationDuration: `${10 + i * 2}s`,
                  animationDirection: i % 2 ? 'reverse' : 'normal'
                }}
              />
            ))}
            
            {/* Hexagon pattern */}
            {Array.from({length: 6}).map((_, i) => (
              <div
                key={`hex-${i}`}
                className="absolute w-16 h-16 border border-blue-400/20 transform rotate-45 animate-pulse"
                style={{
                  right: `${5 + i * 8}%`,
                  bottom: `${10 + i * 10}%`,
                  animationDelay: `${i * 0.5}s`
                }}
              />
            ))}
          </div>
        </div>
        
        <div className="container mx-auto px-4 relative z-20">
          <div className="max-w-4xl mx-auto text-center">
            {/* Animated title with multiple effects */}
            <h2 className="text-4xl md:text-7xl font-bold mb-8 leading-tight">
              Ready to elevate your{" "}
              <span className="relative inline-block">
                <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 animate-pulse">
                  coding skills
                </span>
                {/* Underline animation */}
                <div className="absolute bottom-0 left-0 w-full h-2 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full transform scale-x-0 animate-pulse group-hover:scale-x-100 transition-transform duration-1000"></div>
                
                {/* Sparkle effects */}
                <div className="absolute -top-2 -right-2 w-4 h-4 bg-yellow-400 rounded-full animate-ping opacity-80"></div>
                <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-cyan-400 rounded-full animate-ping opacity-60" style={{animationDelay: '0.5s'}}></div>
              </span>
              ?
            </h2>
            
            {/* Enhanced description */}
            <p className="text-xl md:text-2xl text-gray-300 mb-12 leading-relaxed">
              Join over{" "}
              <span className="font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-blue-400 animate-pulse">
                50,000 programmers
              </span>{" "}
              who have transformed their algorithmic thinking with HKTOJ.
            </p>
            
            {/* Super enhanced CTA button */}
            <div className="relative inline-block mb-8">
              <button
                onClick={handleGetStarted}
                className="group relative px-12 py-6 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 text-xl font-bold rounded-3xl transform transition-all duration-500 ease-in-out hover:-translate-y-3 hover:scale-110 focus:ring-4 focus:ring-purple-400 focus:outline-none overflow-hidden"
              >
                <span className="relative z-10 flex items-center space-x-3">
                  <span>Start Your Journey Today</span>
                  <span className="transform group-hover:translate-x-2 group-hover:scale-125 transition-all duration-300">🚀</span>
                </span>
                
                {/* Multiple glow layers */}
                <div className="absolute inset-0 bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 rounded-3xl blur-2xl opacity-60 group-hover:opacity-100 transition-opacity duration-500 -z-10 animate-pulse"></div>
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 rounded-3xl blur-xl opacity-30 group-hover:opacity-60 transition-opacity duration-300 -z-10"></div>
                
                {/* Animated border */}
                <div className="absolute inset-0 rounded-3xl bg-gradient-to-r from-purple-400 to-blue-400 p-1 -z-20">
                  <div className="w-full h-full bg-gradient-to-r from-purple-600 to-blue-600 rounded-3xl"></div>
                </div>
                
                {/* Particle explosion effect */}
                <div className="absolute inset-0 overflow-hidden rounded-3xl">
                  {Array.from({length: 12}).map((_, i) => (
                    <div
                      key={i}
                      className="absolute w-2 h-2 bg-white rounded-full opacity-0 group-hover:opacity-100 animate-ping"
                      style={{
                        left: `${10 + Math.random() * 80}%`,
                        top: `${10 + Math.random() * 80}%`,
                        animationDelay: `${i * 0.1}s`,
                        animationDuration: `${1 + Math.random()}s`
                      }}
                    />
                  ))}
                </div>
                
                {/* Ripple effect */}
                <div className="absolute inset-0 rounded-3xl bg-white/10 scale-0 group-hover:scale-150 transition-transform duration-700 opacity-0 group-hover:opacity-20"></div>
              </button>
              
              {/* Button orbiting elements */}
              <div className="absolute -inset-8 animate-spin" style={{animationDuration: '8s'}}>
                <div className="absolute top-0 left-1/2 w-3 h-3 bg-purple-400 rounded-full animate-pulse transform -translate-x-1/2"></div>
                <div className="absolute bottom-0 left-1/2 w-2 h-2 bg-blue-400 rounded-full animate-pulse transform -translate-x-1/2"></div>
                <div className="absolute left-0 top-1/2 w-3 h-3 bg-cyan-400 rounded-full animate-pulse transform -translate-y-1/2"></div>
                <div className="absolute right-0 top-1/2 w-2 h-2 bg-pink-400 rounded-full animate-pulse transform -translate-y-1/2"></div>
              </div>
            </div>
            
            {/* Enhanced footer text with animations */}
            <div className="space-y-4">
              <p className="text-gray-400 animate-pulse">
                <span className="inline-block animate-bounce" style={{animationDelay: '0s'}}>💳</span>
                <span className="mx-2">No credit card required</span>
                <span className="text-purple-400">•</span>
                <span className="mx-2">Free tier available</span>
                <span className="inline-block animate-bounce" style={{animationDelay: '1s'}}>✨</span>
              </p>
              
              {/* Trust indicators */}
              <div className="flex justify-center items-center space-x-8 mt-8">
                {['🏆 Award Winner', '🔒 Secure', '⚡ Fast', '🌍 Global'].map((badge, i) => (
                  <div
                    key={i}
                    className="flex items-center space-x-2 text-gray-400 hover:text-purple-300 transition-colors duration-300 animate-pulse"
                    style={{animationDelay: `${i * 0.3}s`}}
                  >
                    <span className="text-lg">{badge.split(' ')[0]}</span>
                    <span className="text-sm font-medium">{badge.split(' ').slice(1).join(' ')}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        
        {/* Floating algorithm symbols */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none opacity-10">
          {['O(n)', 'O(log n)', 'O(n²)', 'O(1)', 'DFS', 'BFS', 'DP', '∑', '∞', '≈'].map((symbol, i) => (
            <div
              key={symbol}
              className="absolute text-2xl font-mono text-purple-300 animate-float"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${i * 0.8}s`,
                animationDuration: `${4 + Math.random() * 3}s`
              }}
            >
              {symbol}
            </div>
          ))}
        </div>
      </div>
      
      {/* Footer with animated wave */}
      <div className="relative overflow-hidden">
        <svg className="absolute bottom-0 w-full h-24 text-purple-900/50" viewBox="0 0 1200 120" preserveAspectRatio="none">
          <path d="M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z" opacity=".25" className="animate-pulse"></path>
          <path d="M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z" opacity=".5" className="animate-pulse" style={{animationDelay: '1s'}}></path>
          <path d="M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z" className="animate-pulse" style={{animationDelay: '2s'}}></path>
        </svg>
        
        <div className="bg-gradient-to-r from-purple-900 to-black py-8">
          <div className="container mx-auto px-4 text-center">
            <p className="text-gray-400 animate-pulse">
              © 2025 HKT Online Judge. Empowering algorithmic minds worldwide.
            </p>
          </div>
        </div>
      </div>
      
      {/* Custom CSS for additional animations */}
      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); }
          33% { transform: translateY(-10px) rotate(5deg); }
          66% { transform: translateY(5px) rotate(-3deg); }
        }
        
        .animate-float {
          animation: float 6s ease-in-out infinite;
        }
        
        @keyframes matrix-rain {
          0% { transform: translateY(-100vh); opacity: 0; }
          10% { opacity: 1; }
          90% { opacity: 1; }
          100% { transform: translateY(100vh); opacity: 0; }
        }
        
        .matrix-rain {
          animation: matrix-rain linear infinite;
        }
        
        @keyframes shimmer {
          0% { background-position: -200% 0; }
          100% { background-position: 200% 0; }
        }
        
        .shimmer {
          background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
          background-size: 200% 100%;
          animation: shimmer 2s infinite;
        }
      `}</style>
    </div>
  );
};

export default HomePage;